# game_logic.py
# --- –º–æ–¥—É–ª—å –º–∏–Ω–∏-–∏–≥—Ä—ã / —ç–∫–æ–Ω–æ–º–∏–∫–∏: —Ö—Ä–∞–Ω–µ–Ω–∏–µ users.json, —Ä–æ—É—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –≤–≤–æ–¥/–≤—ã–≤–æ–¥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ init_from_config()

import json, time, random, os, re
from urllib import request, parse

# ========= –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∑–∞–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ init_from_config =========
TOKEN = ""
ADMIN_IDS = set()

START_BALANCE = 50
WORK_MIN, WORK_MAX = 10, 30
WORK_COOLDOWN_SEC = 600

DAILY_MIN, DAILY_MAX = 100, 300_000
DAILY_COOLDOWN_SEC = 24*3600

CASINO_WEIGHTS = [("x50",0.3),("x20",0.7),("x10",1.5),("x5",4.0),("x2",12.0)]

CARS_LIST = [
    ("Audi RS 6", 100_000), ("BMW M3", 135_000), ("Mustang GT 500", 175_000),
    ("Acura NSX", 200_000), ("Ferrari 458 Italia", 320_000), ("Porsche 911", 350_000),
    ("Mercedes AMG GT", 400_000), ("Bugatti Chiron", 700_000), ("Lamborghini Huracan", 750_000),
    ("Lamborghini Urus", 1_000_000), ("Mercedes G-class", 1_250_000)
]
HOUSES_LIST = [
    ("–£–ª–∏—Ü–∞", 5_000), ("–°–∞—Ä–∞–π", 50_000), ("–ö–æ–º–Ω–∞—Ç–∞ –≤ –æ–±—â–∞–≥–µ", 100_000),
    ("–ö–≤–∞—Ä—Ç–∏—Ä–∞", 70_000), ("–î–æ–º –Ω–∞ —Ä—É–±–ª—ë–≤–∫–µ", 1_000_000),
    ("–í–∏–ª–ª–∞ –≤ –ò—Å–ø–∞–Ω–∏–∏", 1_200_000), ("Moscow City", 1,500,000)
]

BUSINESSES = [
    ("–°–µ—Ä–≤–µ—Ä –≤ Minecraft", 10_000, 400),
    ("–ü—Ä–æ–¥–∞–∂–∞ –ø–∞–ª—ë–Ω—ã—Ö –≤–µ—â–µ–π", 20_000, 800),
    ("–ù–æ—á–Ω–æ–π –∫–ª—É–±", 100_000, 1600),
    ("–ú–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç", 120_000, 3700),
    ("–ö–∞–ª—å—è–Ω–Ω–∞—è", 150_000, 4200)
]
BUSINESS_MAX_LEVEL = 5
BUSINESS_UPGRADE_COST = 150_000

def business_multiplier(level:int)->float:
    level = max(1, min(BUSINESS_MAX_LEVEL, level))
    return 1.0 + (2.5 - 1.0) * (level - 1) / (BUSINESS_MAX_LEVEL - 1)

FARMS = {1: {"price": 5_000, "per_min": 27}, 2: {"price": 10_000, "per_min": 60}, 3: {"price": 20_000, "per_min": 150}}
FARM_MAX_TOTAL = 5000

API = ""
USERS_PATH = "users.json"

# ========= –•—Ä–∞–Ω–∏–ª–∏—â–µ =========
DEFAULT_USER = {
    "username": "", "nick": None, "nick_enabled": False,
    "balance": START_BALANCE, "bank": 0, "rating": 0,
    "house": None, "car": None,
    "business": None, "farms": {"1":0,"2":0,"3":0},
    "farm_last_ts": int(time.time()), "farm_vault": 0,
    "wins": 0, "losses": 0, "last_work": 0, "last_daily": 0,
    "is_banned": False, "mute_until": 0
}

def init_from_config(cfg: dict):
    global TOKEN, ADMIN_IDS, START_BALANCE, WORK_MIN, WORK_MAX, WORK_COOLDOWN_SEC
    global DAILY_MIN, DAILY_MAX, DAILY_COOLDOWN_SEC, API, DEFAULT_USER

    TOKEN = cfg["BOT_TOKEN"]
    ADMIN_IDS = set(cfg.get("ADMIN_IDS", []))
    START_BALANCE = cfg.get("START_BALANCE", START_BALANCE)
    WORK_MIN = cfg.get("WORK_MIN", WORK_MIN)
    WORK_MAX = cfg.get("WORK_MAX", WORK_MAX)
    WORK_COOLDOWN_SEC = cfg.get("WORK_COOLDOWN_SEC", WORK_COOLDOWN_SEC)
    # daily –æ—Å—Ç–∞–≤–ª—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config.json

    API = "https://api.telegram.org/bot" + TOKEN + "/"

    DEFAULT_USER = {
        "username": "", "nick": None, "nick_enabled": False,
        "balance": START_BALANCE, "bank": 0, "rating": 0,
        "house": None, "car": None,
        "business": None, "farms": {"1":0,"2":0,"3":0},
        "farm_last_ts": int(time.time()), "farm_vault": 0,
        "wins": 0, "losses": 0, "last_work": 0, "last_daily": 0,
        "is_banned": False, "mute_until": 0
    }

def load_users():
    if not os.path.exists(USERS_PATH):
        return {}
    with open(USERS_PATH, "r", encoding="utf-8") as f:
        txt = f.read().strip()
        if not txt:
            return {}
        return json.loads(txt)

def save_users(data):
    with open(USERS_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = {}

def patch_defaults(u: dict) -> dict:
    for k, v in DEFAULT_USER.items():
        if k not in u:
            u[k] = json.loads(json.dumps(v))
    u.setdefault("farms", {"1":0,"2":0,"3":0})
    for k in ["1","2","3"]:
        u["farms"].setdefault(k, 0)
    return u

def ensure_user(uid, username=None):
    uid_s = str(uid)
    if uid_s not in users:
        users[uid_s] = patch_defaults({"username": (username or "").lower()})
        save_users(users)
    else:
        u = users[uid_s]
        patch_defaults(u)
        if username:
            uname = (username or "").lower()
            if u.get("username") != uname:
                u["username"] = uname
                save_users(users)
    return users[uid_s]

# ========= Telegram API (–ø—Ä—è–º–æ–π HTTP –∫–∞–∫ —É —Ç–µ–±—è) =========
def api_call(method, params=None):
    url = API + method
    data = None; headers = {}
    if params is not None:
        data = json.dumps(params).encode('utf-8')
        headers['Content-Type'] = 'application/json'
    req = request.Request(url, data=data, headers=headers)
    try:
        with request.urlopen(req, timeout=60) as resp:
            return json.loads(resp.read().decode('utf-8'))
    except Exception as e:
        print("API call error:", e)
        return None

def send_message(chat_id, text):
    api_call("sendMessage", {"chat_id": chat_id, "text": text, "parse_mode": "HTML"})

# ========= –£—Ç–∏–ª–∏—Ç—ã =========
def is_admin(uid): return uid in ADMIN_IDS
def display_name(u):
    if u.get("nick_enabled") and u.get("nick"): return u["nick"]
    return "@"+u["username"] if u.get("username") else "–∏–≥—Ä–æ–∫"

def resolve_target_to_id(target:str):
    t = target.strip()
    if t.isdigit() or (t.startswith("-") and t[1:].isdigit()): return int(t)
    if t.startswith("@"):
        name = t[1:].lower()
        for uid_s, data in users.items():
            if data.get("username") == name: return int(uid_s)
    return None

def norm(s: str) -> str:
    s = s.replace("\u200b"," ").replace("\u200c"," ").replace("\xa0"," ")
    return re.sub(r"\s+", " ", s).strip()

def to_int(text: str) -> int:
    m = re.sub(r"[^\d]", "", text or "")
    return int(m) if m.isdigit() else 0

def clamp(n, lo, hi): return max(lo, min(hi, n))

# ========= –ù–∞—á–∏—Å–ª–µ–Ω–∏—è =========
def accrue_farm(u):
    now = int(time.time()); last = u.get("farm_last_ts", now)
    minutes = max(0, (now - last)//60)
    if minutes <= 0:
        u["farm_last_ts"] = now
        return
    total = 0
    for tier, cnt in u.get("farms", {}).items():
        c = int(cnt)
        if c <= 0: continue
        total += FARMS[int(tier)]["per_min"] * c * minutes
    u["farm_vault"] = u.get("farm_vault",0) + total
    u["farm_last_ts"] = last + minutes*60

def accrue_business(u):
    if not u.get("business"): return
    now = int(time.time()); b = u["business"]; last = b.get("last_ts", now)
    hours = max(0, (now - last)//3600)
    if hours <= 0: return
    mult = business_multiplier(clamp(b.get("level",1), 1, BUSINESS_MAX_LEVEL))
    income = int(b["base_hr"] * mult * hours)
    b["vault"] = b.get("vault",0) + income
    b["last_ts"] = last + hours*3600

# ========= –ö–æ–º–∞–Ω–¥—ã (–∫–æ—Ä–æ—Ç–∫–æ –æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏) =========
def cmd_info(chat_id):
    send_message(chat_id,
"""<b>üçÄ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ</b>
–ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ [—Ñ—Ä–∞–∑–∞]
–í—ã–±–µ—Ä–∏ [—Ñ—Ä–∞–∑–∞] –∏–ª–∏ [—Ñ—Ä–∞–∑–∞2]
–†–µ—à–∏ [–ø—Ä–∏–º–µ—Ä]

<b>üíº –ë–∏–∑–Ω–µ—Å</b>
–ë–∏–∑–Ω–µ—Å
–ë–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [—Å—É–º–º–∞]
–ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å

<b>üöÄ –ò–≥—Ä—ã</b>
–ö–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]
–¢—Ä–µ–π–¥ [–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑] [—Å—É–º–º–∞]

<b>üí° –†–∞–∑–Ω–æ–µ</b>
–ü—Ä–æ—Ñ–∏–ª—å
–ë–∞–ª–∞–Ω—Å
–ë–∞–Ω–∫ [—Å—É–º–º–∞/—Å–Ω—è—Ç—å —Å—É–º–º–∞/–ø–æ–ª–æ–∂–∏—Ç—å —Å—É–º–º–∞]
–†–µ–π—Ç–∏–Ω–≥
–ù–∏–∫ [–Ω–∏–∫/–≤–∫–ª/–≤—ã–∫–ª]
–ü—Ä–æ–¥–∞—Ç—å [–º–∞—à–∏–Ω–∞/–¥–æ–º/–±–∏–∑–Ω–µ—Å]
–§–µ—Ä–º–∞
–ü–µ—Ä–µ–¥–∞—Ç—å [@–Ω–∏–∫|id] [—Å—É–º–º–∞]
–¢–æ–ø
–ë–æ–Ω—É—Å
–†–µ–ø–æ—Ä—Ç [—Ñ—Ä–∞–∑–∞]"""
    )

def handle_start(msg):
    uid = msg['from']['id']
    uname = (msg['from'].get('username') or msg['from'].get('first_name') or "").lower()
    u = ensure_user(uid, uname)
    send_message(msg["chat"]["id"], f"–ü—Ä–∏–≤–µ—Ç, {display_name(u)}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n–ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def handle_profile(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    accrue_farm(u); accrue_business(u); save_users(users)
    car = u['car']['name'] if u.get('car') else '–Ω–µ—Ç'
    house = u['house']['name'] if u.get('house') else '–Ω–µ—Ç'
    biz = (f"{u['business']['name']} (–ª–≤–ª {u['business']['level']})" if u.get('business') else "–Ω–µ—Ç")
    send_message(msg["chat"]["id"],
        f"<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–≥—Ä–æ–∫: {display_name(u)}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {u['balance']}$ | üè¶ –ë–∞–Ω–∫: {u['bank']}$ | üëë –†–µ–π—Ç–∏–Ω–≥: {u.get('rating',0)}\n"
        f"üè† –î–æ–º: {house}\nüöó –ú–∞—à–∏–Ω–∞: {car}\nüè¢ –ë–∏–∑–Ω–µ—Å: {biz}"
    )

def handle_balance(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    send_message(msg["chat"]["id"], f"üí∞ –ë–∞–ª–∞–Ω—Å: {u['balance']}$ | üè¶ –ë–∞–Ω–∫: {u['bank']}$")

def handle_work(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if u.get("is_banned"): return
    if u.get("mute_until",0) > time.time(): return
    now = int(time.time()); last = u.get("last_work", 0)
    if now - last < WORK_COOLDOWN_SEC:
        left = WORK_COOLDOWN_SEC - (now - last)
        send_message(msg["chat"]["id"], f"‚è≥ –ï—â—ë {left//60} –º–∏–Ω {left%60} —Å–µ–∫ –¥–æ —Ä–∞–±–æ—Ç—ã.")
        return
    reward = random.randint(WORK_MIN, WORK_MAX)
    u["balance"] += reward; u["last_work"] = now; save_users(users)
    send_message(msg["chat"]["id"], f"‚öíÔ∏è –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {reward}$! –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def handle_daily(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    now = int(time.time()); last = u.get("last_daily", 0)
    if now - last < DAILY_COOLDOWN_SEC:
        left = DAILY_COOLDOWN_SEC - (now - last)
        send_message(msg["chat"]["id"], f"‚è≥ –ë–æ–Ω—É—Å —á–µ—Ä–µ–∑ {left//3600}—á {(left%3600)//60}–º.")
        return
    reward = random.randint(DAILY_MIN, DAILY_MAX)
    u["balance"] += reward; u["last_daily"] = now; save_users(users)
    send_message(msg["chat"]["id"], f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +{reward}$! –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def handle_casino_args(msg, args):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if not args:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: –∫–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]"); return
    bet = to_int(args[0])
    if bet <= 0:
        send_message(msg["chat"]["id"], "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 1$."); return
    if u["balance"] < bet:
        send_message(msg["chat"]["id"], "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!"); return
    roll = random.random()*100.0; acc = 0.0; outcome = "lose"
    for mult, w in CASINO_WEIGHTS:
        acc += w
        if roll <= acc: outcome = mult; break
    if outcome == "lose":
        u["balance"] -= bet
        text = f"üé∞ –ù–µ –ø–æ–≤–µ–∑–ª–æ! -{bet}$ (–æ—Å—Ç–∞–ª–æ—Å—å {u['balance']}$)"
    else:
        m = int(outcome[1:]); gain = bet*(m-1)
        u["balance"] += gain
        text = f"üé∞ –£–¥–∞—á–∞! {outcome}! +{gain}$ (—Ç–µ–ø–µ—Ä—å {u['balance']}$)"
    save_users(users); send_message(msg["chat"]["id"], text)

def handle_trade_args(msg, args):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(args) < 2:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: —Ç—Ä–µ–π–¥ –≤–≤–µ—Ä—Ö|–≤–Ω–∏–∑ [—Å—É–º–º–∞]"); return
    direction = args[0].lower()
    bet = to_int(args[1])
    if bet <= 0:
        send_message(msg["chat"]["id"], "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 1$."); return
    if u["balance"] < bet:
        send_message(msg["chat"]["id"], "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!"); return
    actual = random.choice(["–≤–≤–µ—Ä—Ö","–≤–Ω–∏–∑"])
    if direction not in ["–≤–≤–µ—Ä—Ö","–≤–Ω–∏–∑"]:
        send_message(msg["chat"]["id"], "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑."); return
    if direction == actual:
        u["balance"] += bet
        send_message(msg["chat"]["id"], f"üìà –†—ã–Ω–æ–∫ –ø–æ—à—ë–ª {actual}! +{bet}$ (—Ç–µ–ø–µ—Ä—å {u['balance']}$)")
    else:
        u["balance"] -= bet
        send_message(msg["chat"]["id"], f"üìâ –†—ã–Ω–æ–∫ –ø–æ—à—ë–ª {actual}. -{bet}$ (–æ—Å—Ç–∞–ª–æ—Å—å {u['balance']}$)")
    save_users(users)

def handle_bank_args(msg, args):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if not args:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: –±–∞–Ω–∫ [—Å—É–º–º–∞] | –±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å [—Å—É–º–º–∞] | –±–∞–Ω–∫ —Å–Ω—è—Ç—å [—Å—É–º–º–∞]")
        return
    if args[0].lower() in ["–ø–æ–ª–æ–∂–∏—Ç—å","—Å–Ω—è—Ç—å"]:
        action = args[0].lower()
        if len(args) < 2:
            send_message(msg["chat"]["id"], "–£–∫–∞–∂–∏ —Å—É–º–º—É."); return
        amount = to_int(args[1])
    else:
        action = "–ø–æ–ª–æ–∂–∏—Ç—å"
        amount = to_int(args[0])

    if amount <= 0:
        send_message(msg["chat"]["id"], "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0."); return

    if action == "–ø–æ–ª–æ–∂–∏—Ç—å":
        if u["balance"] < amount:
            send_message(msg["chat"]["id"], "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –∫–æ—à–µ–ª—å–∫–µ."); return
        u["balance"] -= amount; u["bank"] += amount
        save_users(users)
        send_message(msg["chat"]["id"], f"üè¶ –ü–æ–ª–æ–∂–µ–Ω–æ {amount}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$ | –ë–∞–Ω–∫: {u['bank']}$")
    else:
        if u["bank"] < amount:
            send_message(msg["chat"]["id"], "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ."); return
        u["bank"] -= amount; u["balance"] += amount
        save_users(users)
        send_message(msg["chat"]["id"], f"üè¶ –°–Ω—è—Ç–æ {amount}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$ | –ë–∞–Ω–∫: {u['bank']}$")

def handle_transfer(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(parts) < 3:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: –ø–µ—Ä–µ–¥–∞—Ç—å @–Ω–∏–∫|id [—Å—É–º–º–∞]"); return
    to_id = resolve_target_to_id(parts[1])
    if not to_id:
        send_message(msg["chat"]["id"], "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É."); return
    amount = to_int(parts[2])
    if amount <= 0 or u["balance"] < amount:
        send_message(msg["chat"]["id"], "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."); return
    rec = ensure_user(to_id)
    u["balance"] -= amount; rec["balance"] += amount; save_users(users)
    send_message(msg["chat"]["id"], f"ü§ù –ü–µ—Ä–µ–≤–æ–¥ {amount}$ ‚Üí {display_name(rec)}. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {u['balance']}$")

def list_cars(chat_id):
    lines = [f"{i+1}) {name} ({price}$)" for i,(name,price) in enumerate(CARS_LIST)]
    send_message(chat_id, "üöó <b>–ú–∞—à–∏–Ω—ã</b>:\n" + "\n".join(lines) + "\n–ö—É–ø–∏—Ç—å: –º–∞—à–∏–Ω–∞ [–Ω–æ–º–µ—Ä]")

def buy_car(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(parts) < 2:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: –º–∞—à–∏–Ω–∞ [–Ω–æ–º–µ—Ä]"); return
    idx = to_int(parts[1]) - 1
    if not (0 <= idx < len(CARS_LIST)):
        send_message(msg["chat"]["id"], "–ù–µ—Ç —Ç–∞–∫–æ–π –º–∞—à–∏–Ω—ã."); return
    name, price = CARS_LIST[idx]
    if u["balance"] < price:
        send_message(msg["chat"]["id"], f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –¶–µ–Ω–∞ {price}$, —É —Ç–µ–±—è {u['balance']}$"); return
    u["balance"] -= price; u["car"] = {"name": name, "price": price}; save_users(users)
    send_message(msg["chat"]["id"], f"üöó –ö—É–ø–ª–µ–Ω {name} –∑–∞ {price}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def list_houses(chat_id):
    lines = [f"{i+1}) {name} ({price}$)" for i,(name,price) in enumerate(HOUSES_LIST)]
    send_message(chat_id, "üè† <b>–î–æ–º–∞</b>:\n" + "\n".join(lines) + "\n–ö—É–ø–∏—Ç—å: –¥–æ–º [–Ω–æ–º–µ—Ä]")

def buy_house(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(parts) < 2:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: –¥–æ–º [–Ω–æ–º–µ—Ä]"); return
    idx = to_int(parts[1]) - 1
    if not (0 <= idx < len(HOUSES_LIST)):
        send_message(msg["chat"]["id"], "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–æ–º–∞."); return
    name, price = HOUSES_LIST[idx]
    if u["balance"] < price:
        send_message(msg["chat"]["id"], f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –¶–µ–Ω–∞ {price}$, —É —Ç–µ–±—è {u['balance']}$"); return
    u["balance"] -= price; u["house"] = {"name": name, "price": price}; save_users(users)
    send_message(msg["chat"]["id"], f"üè† –ö—É–ø–ª–µ–Ω {name} –∑–∞ {price}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def handle_sell(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(parts) < 2:
        send_message(msg["chat"]["id"], "–ü—Ä–æ–¥–∞—Ç—å —á—Ç–æ? –ø—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω–∞|–¥–æ–º|–±–∏–∑–Ω–µ—Å"); return
    what = parts[1].lower(); refund_rate = 0.7
    if what == "–º–∞—à–∏–Ω–∞" and u.get("car"):
        refund = int(u["car"]["price"]*refund_rate); u["balance"] += refund; u["car"] = None
        save_users(users); send_message(msg["chat"]["id"], f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ –∞–≤—Ç–æ. –í–æ–∑–≤—Ä–∞—Ç {refund}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")
    elif what == "–¥–æ–º" and u.get("house"):
        refund = int(u["house"]["price"]*refund_rate); u["balance"] += refund; u["house"] = None
        save_users(users); send_message(msg["chat"]["id"], f"üí∏ –ü—Ä–æ–¥–∞–Ω –¥–æ–º. –í–æ–∑–≤—Ä–∞—Ç {refund}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")
    elif what == "–±–∏–∑–Ω–µ—Å" and u.get("business"):
        refund = int(u["business"]["price"]*refund_rate); u["balance"] += refund; u["business"] = None
        save_users(users); send_message(msg["chat"]["id"], f"üí∏ –ü—Ä–æ–¥–∞–Ω –±–∏–∑–Ω–µ—Å. –í–æ–∑–≤—Ä–∞—Ç {refund}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")
    else:
        send_message(msg["chat"]["id"], "–ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.")

def list_businesses(chat_id):
    lines = [f"{i+1}) {name}: —Ü–µ–Ω–∞ {price}$, –ø—Ä–∏–±—ã–ª—å {hr}$/—á–∞—Å" for i,(name,price,hr) in enumerate(BUSINESSES)]
    send_message(chat_id, "üè¢ <b>–ë–∏–∑–Ω–µ—Å—ã</b>:\n" + "\n".join(lines) + "\n–ö—É–ø–∏—Ç—å: –±–∏–∑–Ω–µ—Å [–Ω–æ–º–µ—Ä]")

def buy_business(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if u.get("business"):
        send_message(msg["chat"]["id"], "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å. –†–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω."); return
    if len(parts) < 2:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: –±–∏–∑–Ω–µ—Å [–Ω–æ–º–µ—Ä]"); return
    idx = to_int(parts[1]) - 1
    if not (0 <= idx < len(BUSINESSES)):
        send_message(msg["chat"]["id"], "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞."); return
    name, price, base_hr = BUSINESSES[idx]
    if u["balance"] < price:
        send_message(msg["chat"]["id"], f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –¶–µ–Ω–∞ {price}$, —É —Ç–µ–±—è {u['balance']}$"); return
    u["balance"] -= price
    u["business"] = {"name": name, "price": price, "base_hr": base_hr, "level": 1, "last_ts": int(time.time()), "vault": 0}
    save_users(users)
    send_message(msg["chat"]["id"], f"üè¢ –ö—É–ø–ª–µ–Ω –±–∏–∑–Ω–µ—Å {name} –∑–∞ {price}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def business_stats(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if not u.get("business"):
        send_message(msg["chat"]["id"], "–ë–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç."); return
    accrue_business(u); save_users(users)
    b = u["business"]; lvl = b["level"]; mult = business_multiplier(lvl)
    send_message(msg["chat"]["id"],
        f"üìä –ë–∏–∑–Ω–µ—Å: {b['name']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {lvl} (x{mult:.2f})\n"
        f"–ë–∞–∑–∞: {b['base_hr']}$/—á–∞—Å\n"
        f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {b.get('vault',0)}$\n"
        f"–£–ª—É—á—à–µ–Ω–∏–µ: {BUSINESS_UPGRADE_COST}$ (–º–∞–∫—Å {BUSINESS_MAX_LEVEL})"
    )

def business_withdraw_all(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if not u.get("business"):
        send_message(msg["chat"]["id"], "–ë–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç."); return
    accrue_business(u); v = u["business"].get("vault",0)
    if v <= 0:
        send_message(msg["chat"]["id"], "–°–Ω–∏–º–∞—Ç—å –Ω–µ—á–µ–≥–æ."); return
    u["business"]["vault"] = 0; u["balance"] += v; save_users(users)
    send_message(msg["chat"]["id"], f"üíµ –°–Ω—è—Ç–æ {v}$ –∏–∑ –±–∏–∑–Ω–µ—Å–∞. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def business_withdraw_amount(msg, amount_text):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if not u.get("business"):
        send_message(msg["chat"]["id"], "–ë–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç."); return
    accrue_business(u)
    want = to_int(amount_text)
    v = u["business"].get("vault",0)
    if want <= 0:
        send_message(msg["chat"]["id"], "–£–∫–∞–∂–∏ —Å—É–º–º—É > 0."); return
    if v <= 0:
        send_message(msg["chat"]["id"], "–°–Ω–∏–º–∞—Ç—å –Ω–µ—á–µ–≥–æ."); return
    take = min(want, v)
    u["business"]["vault"] = v - take
    u["balance"] += take; save_users(users)
    send_message(msg["chat"]["id"], f"üíµ –°–Ω—è—Ç–æ {take}$ (–æ—Å—Ç–∞—Ç–æ–∫ –≤ –±–∏–∑–Ω–µ—Å–µ: {u['business']['vault']}$). –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def business_upgrade(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if not u.get("business"):
        send_message(msg["chat"]["id"], "–ë–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç."); return
    b = u["business"]; lvl = b["level"]
    if lvl >= BUSINESS_MAX_LEVEL:
        send_message(msg["chat"]["id"], "–ú–∞–∫—Å —É—Ä–æ–≤–µ–Ω—å —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç."); return
    cost = BUSINESS_UPGRADE_COST
    if u["balance"] < cost:
        send_message(msg["chat"]["id"], f"–ù—É–∂–Ω–æ {cost}$, —É —Ç–µ–±—è {u['balance']}$"); return
    u["balance"] -= cost; b["level"] = lvl + 1; save_users(users)
    send_message(msg["chat"]["id"], f"‚úÖ –ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–µ–Ω –¥–æ {b['level']} —É—Ä–æ–≤–Ω—è. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def farm_menu(chat_id):
    send_message(chat_id,
        f"üíΩ <b>–§–µ—Ä–º—ã</b>\n"
        f"1) {FARMS[1]['price']}$ /—à—Ç ‚Äî {FARMS[1]['per_min']}$/–º–∏–Ω\n"
        f"2) {FARMS[2]['price']}$ /—à—Ç ‚Äî {FARMS[2]['per_min']}$/–º–∏–Ω\n"
        f"3) {FARMS[3]['price']}$ /—à—Ç ‚Äî {FARMS[3]['per_min']}$/–º–∏–Ω\n"
        f"–ú–∞–∫—Å–∏–º—É–º —Å—É–º–º–∞—Ä–Ω–æ: {FARM_MAX_TOTAL} —à—Ç\n"
        f"–ö–æ–º–∞–Ω–¥—ã: —Ñ–µ—Ä–º–∞ –∫—É–ø–∏—Ç—å [1|2|3] [—à—Ç], —Ñ–µ—Ä–º–∞ —Å–Ω—è—Ç—å, —Ñ–µ—Ä–º–∞ —Å—Ç–∞—Ç–∞"
    )

def farm_buy(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(parts) < 4:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: —Ñ–µ—Ä–º–∞ –∫—É–ø–∏—Ç—å [1|2|3] [—à—Ç]"); return
    tier = to_int(parts[2]); qty = to_int(parts[3])
    if tier not in FARMS or qty <= 0:
        send_message(msg["chat"]["id"], "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."); return
    total_now = sum(int(u["farms"][k]) for k in ["1","2","3"])
    if total_now + qty > FARM_MAX_TOTAL:
        send_message(msg["chat"]["id"], f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç. –î–æ—Å—Ç—É–ø–Ω–æ –µ—â—ë {FARM_MAX_TOTAL - total_now} —à—Ç."); return
    price = FARMS[tier]["price"] * qty
    if u["balance"] < price:
        send_message(msg["chat"]["id"], f"–ù—É–∂–Ω–æ {price}$, —É —Ç–µ–±—è {u['balance']}$"); return
    accrue_farm(u); u["balance"] -= price; u["farms"][str(tier)] += qty; save_users(users)
    send_message(msg["chat"]["id"], f"üíΩ –ö—É–ø–ª–µ–Ω–æ {qty} —à—Ç —Ñ–µ—Ä–º—ã {tier} –∑–∞ {price}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def farm_withdraw(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    accrue_farm(u); v = u.get("farm_vault",0)
    if v <= 0:
        send_message(msg["chat"]["id"], "–°–Ω–∏–º–∞—Ç—å –Ω–µ—á–µ–≥–æ."); return
    u["farm_vault"] = 0; u["balance"] += v; save_users(users)
    send_message(msg["chat"]["id"], f"üíΩ –°–Ω—è—Ç–æ {v}$. –ë–∞–ª–∞–Ω—Å: {u['balance']}$")

def farm_stats(msg):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    accrue_farm(u); save_users(users)
    f1,f2,f3 = u["farms"]["1"], u["farms"]["2"], u["farms"]["3"]
    per_min = f1*FARMS[1]["per_min"] + f2*FARMS[2]["per_min"] + f3*FARMS[3]["per_min"]
    send_message(msg["chat"]["id"], f"üíΩ –§–µ—Ä–º—ã: 1‚Üí{f1} —à—Ç, 2‚Üí{f2} —à—Ç, 3‚Üí{f3} —à—Ç\n–î–æ—Ö–æ–¥: {per_min}$/–º–∏–Ω\n–ù–∞–∫–æ–ø–ª–µ–Ω–æ: {u.get('farm_vault',0)}$")

def handle_nick(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(parts) < 2:
        send_message(msg["chat"]["id"], "–ù–∏–∫: –Ω–∏–∫ [—Ç–µ–∫—Å—Ç] | –Ω–∏–∫ –≤–∫–ª | –Ω–∏–∫ –≤—ã–∫–ª"); return
    sub = parts[1].lower()
    if sub == "–≤–∫–ª":
        u["nick_enabled"]=True; save_users(users); send_message(msg["chat"]["id"], "–ù–∏–∫ –≤–∫–ª—é—á—ë–Ω.")
    elif sub == "–≤—ã–∫–ª":
        u["nick_enabled"]=False; save_users(users); send_message(msg["chat"]["id"], "–ù–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        new_nick = " ".join(parts[1:])
        if len(new_nick) > 24:
            send_message(msg["chat"]["id"], "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫ (–º–∞–∫—Å 24)."); return
        u["nick"]=new_nick; save_users(users); send_message(msg["chat"]["id"], f"–ù–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_nick}")

def handle_rating(msg, parts):
    uid = msg['from']['id']; u = ensure_user(uid, msg['from'].get('username'))
    if len(parts)>=2 and parts[1].lower()=="–∫—É–ø–∏—Ç—å":
        qty = 1
        if len(parts)>=3: qty = max(1, to_int(parts[2]))
        cost = 25_000*qty
        if u["balance"]<cost:
            send_message(msg["chat"]["id"], f"–ù—É–∂–Ω–æ {cost}$, —É —Ç–µ–±—è {u['balance']}$"); return
        u["balance"]-=cost; u["rating"]=u.get("rating",0)+qty; save_users(users)
        send_message(msg["chat"]["id"], f"üëë –ö—É–ø–ª–µ–Ω–æ {qty}. –ë–∞–ª–∞–Ω—Å: {u['balance']}$ | –†–µ–π—Ç–∏–Ω–≥: {u['rating']}")
    else:
        send_message(msg["chat"]["id"], f"üëë –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {u.get('rating',0)}. –ö—É–ø–∏—Ç—å: —Ä–µ–π—Ç–∏–Ω–≥ –∫—É–ø–∏—Ç—å [—á–∏—Å–ª–æ]")

def handle_top(msg):
    top = sorted([(u.get("rating",0), display_name(u)) for u in users.values()], reverse=True)[:10]
    lines = [f"{i}. {name} ‚Äî üëë {r}" for i,(r,name) in enumerate(top, start=1)]
    send_message(msg["chat"]["id"], "üèÜ <b>–¢–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É</b>:\n" + ("\n".join(lines) if lines else "–ü—É—Å—Ç–æ"))

def handle_reverse(msg, parts, raw_text):
    phrase = raw_text.partition(' ')[2]
    if not phrase:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏ [—Ñ—Ä–∞–∑–∞]"); return
    send_message(msg["chat"]["id"], phrase[::-1])

def handle_choose(msg, raw_text):
    rest = raw_text.partition(' ')[2]
    if " –∏–ª–∏ " not in rest:
        send_message(msg["chat"]["id"], "–§–æ—Ä–º–∞—Ç: –≤—ã–±–µ—Ä–∏ [—Ñ—Ä–∞–∑–∞] –∏–ª–∏ [—Ñ—Ä–∞–∑–∞2]"); return
    a,_,b = rest.partition(" –∏–ª–∏ "); a=a.strip(); b=b.strip()
    if not a or not b:
        send_message(msg["chat"]["id"], "–ù—É–∂–Ω–æ 2 —Ñ—Ä–∞–∑—ã —á–µ—Ä–µ–∑ ¬´–∏–ª–∏¬ª."); return
    send_message(msg["chat"]["id"], f"–í—ã–±–∏—Ä–∞—é: <b>{random.choice([a,b])}</b>")

def handle_solve(msg, raw_text):
    expr = raw_text.partition(' ')[2].strip()
    if not expr:
        send_message(msg["chat"]["id"], "–ò—Å–ø–æ–ª—å–∑—É–π: —Ä–µ—à–∏ [–ø—Ä–∏–º–µ—Ä]"); return
    allowed = set("0123456789+-*/(). ")
    if any(ch not in allowed for ch in expr):
        send_message(msg["chat"]["id"], "–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ + - * / ( )"); return
    try:
        val = eval(expr, {"__builtins__": {}}, {})
        send_message(msg["chat"]["id"], f"üì† –û—Ç–≤–µ—Ç: <b>{val}</b>")
    except:
        send_message(msg["chat"]["id"], "–ù–µ —Å–º–æ–≥ –ø–æ—Å—á–∏—Ç–∞—Ç—å. –ü—Ä–æ–≤–µ—Ä—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.")

def handle_report(msg, raw_text):
    text = raw_text.partition(' ')[2].strip()
    if not text:
        send_message(msg["chat"]["id"], "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã."); return
    send_message(msg["chat"]["id"], "–°–ø–∞—Å–∏–±–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")

# ========= –†–æ—É—Ç–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ò–ì–†–´ (–±–µ–∑ —Å–ª—ç—à–µ–π) =========
def build_msg_dict(aiogram_message) -> dict:
    m = aiogram_message
    return {
        "message_id": m.message_id,
        "from": {"id": m.from_user.id, "username": m.from_user.username, "first_name": m.from_user.first_name},
        "chat": {"id": m.chat.id},
        "date": int(time.time()),
        "text": m.text or ""
    }

def process_text_with_game(aiogram_message) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ò–ì–†–û–ô; False ‚Äî –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (–ø—É—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç –ò–ò)."""
    msg = build_msg_dict(aiogram_message)

    # –º–∏–≥—Ä–∞—Ü–∏—è —é–∑–µ—Ä–∞ + –∞–Ω—Ç–∏-—Å–ø–∞–º
    u = ensure_user(msg['from']['id'], msg['from'].get('username'))
    if u.get("is_banned") or (u.get("mute_until",0) > time.time()):
        return True  # —Å—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º (–ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º)

    raw = (msg.get("text") or "").replace("\r","")
    raw_norm = norm(raw)
    parts    = raw_norm.split(" ")
    text_low = raw_norm.lower()
    args     = parts[1:]

    handled = True
    if text_low in ["–∏–Ω—Ñ–æ","info"]:             cmd_info(msg["chat"]["id"])
    elif text_low.startswith("–ø—Ä–æ—Ñ–∏–ª—å"):        handle_profile(msg)
    elif text_low.startswith("–±–∞–ª–∞–Ω—Å"):         handle_balance(msg)
    elif text_low.startswith("—Ä–∞–±–æ—Ç–∞"):         handle_work(msg)
    elif text_low.startswith("–±–æ–Ω—É—Å"):          handle_daily(msg)
    elif text_low.startswith("–∫–∞–∑–∏–Ω–æ"):         handle_casino_args(msg, args)
    elif text_low.startswith("—Ç—Ä–µ–π–¥"):          handle_trade_args(msg, args)
    elif text_low.startswith("–±–∞–Ω–∫"):           handle_bank_args(msg, args)
    elif text_low == "–º–∞—à–∏–Ω—ã":                  list_cars(msg["chat"]["id"])
    elif text_low.startswith("–º–∞—à–∏–Ω–∞"):         buy_car(msg, parts)
    elif text_low == "–¥–æ–º–∞":                    list_houses(msg["chat"]["id"])
    elif text_low.startswith("–¥–æ–º"):            buy_house(msg, parts)
    elif text_low.startswith("–ø—Ä–æ–¥–∞—Ç—å"):        handle_sell(msg, parts)
    elif text_low == "–±–∏–∑–Ω–µ—Å":                  list_businesses(msg["chat"]["id"])
    elif text_low == "–±–∏–∑–Ω–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":       business_stats(msg)
    elif text_low.startswith("–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å "):  business_withdraw_amount(msg, args[1] if len(args)>=2 else "0")
    elif text_low == "–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å":            business_withdraw_all(msg)
    elif text_low == "–±–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å":         business_upgrade(msg)
    elif text_low.startswith("–±–∏–∑–Ω–µ—Å "):        buy_business(msg, parts)
    elif text_low == "—Ñ–µ—Ä–º–∞":                   farm_menu(msg["chat"]["id"])
    elif text_low.startswith("—Ñ–µ—Ä–º–∞ –∫—É–ø–∏—Ç—å"):   farm_buy(msg, parts)
    elif text_low == "—Ñ–µ—Ä–º–∞ —Å–Ω—è—Ç—å":             farm_withdraw(msg)
    elif text_low == "—Ñ–µ—Ä–º–∞ —Å—Ç–∞—Ç–∞":             farm_stats(msg)
    elif text_low.startswith("–Ω–∏–∫"):            handle_nick(msg, parts)
    elif text_low.startswith("—Ä–µ–π—Ç–∏–Ω–≥"):        handle_rating(msg, parts)
    elif text_low == "—Ç–æ–ø":                     handle_top(msg)
    elif text_low.startswith("–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏"):      handle_reverse(msg, parts, raw_norm)
    elif text_low.startswith("–≤—ã–±–µ—Ä–∏"):         handle_choose(msg, raw_norm)
    elif text_low.startswith("—Ä–µ—à–∏"):           handle_solve(msg, raw_norm)
    elif text_low.startswith("—Ä–µ–ø–æ—Ä—Ç"):         handle_report(msg, raw_norm)
    elif text_low.startswith("–ø–µ—Ä–µ–¥–∞—Ç—å"):       handle_transfer(msg, parts)
    else:
        handled = False

    return handled

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º users –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
def _ensure_users_loaded():
    global users
    users = load_users()

_ensure_users_loaded()
