import asyncio
import json
import logging
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder

import game_logic as game  # –º–∏–Ω–∏-–∏–≥—Ä–∞

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ---------------- #
with open("config.json", "r", encoding="utf-8") as f:
    CFG = json.load(f)

BOT_TOKEN = CFG["BOT_TOKEN"]

# ---------------- –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ò–ò ---------------- #
API_URL = "https://api-inference.huggingface.co/models/google/gemma-2b-it"

def generate(prompt: str, system: str | None = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ HuggingFace"""
    system = system or "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    text = f"{system}\n\n–í–æ–ø—Ä–æ—Å: {prompt}"
    try:
        r = requests.post(API_URL, json={"inputs": text}, timeout=60)
        if r.status_code == 200:
            data = r.json()
            if isinstance(data, list) and len(data) and "generated_text" in data[0]:
                return data[0]["generated_text"].strip()
            return str(data)
        else:
            return f"–û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

async def generate_async(prompt: str, system: str | None = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å–∞–ª"""
    return await asyncio.to_thread(generate, prompt, system)

# ---------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---------------- #
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
game.init_from_config(CFG)

# ---------------- –ö–õ–ê–í–ò–ê–¢–£–†–ê ---------------- #
def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üéÆ –ò–≥—Ä–∞—Ç—å")
    kb.button(text="ü§ñ –ò–ò —á–∞—Ç")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

# ---------------- –ö–û–ú–ê–ù–î–´ ---------------- #
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=main_menu())

# ---------------- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ---------------- #
@dp.message()
async def fallback(m: Message):
    text = (m.text or "").lower()

    # üéÆ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É
    if text.startswith("üéÆ") or text.startswith("–∏–≥—Ä–∞"):
        await m.answer("üé≤ –ó–∞–ø—É—Å–∫–∞—é –∏–≥—Ä—É...")
        await game.process_text_with_game(m)
        return

    # ü§ñ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º –ò–ò
    if text.startswith("ü§ñ") or text.startswith("–∏–∏") or text.startswith("ai"):
        await m.answer("–ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å, —è –ø–æ–¥—É–º–∞—é ü§î")
        return

    # –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ —Å –ò–ò
    await m.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    answer = await generate_async(m.text or "", system="–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º.")
    await m.answer(answer if answer else "–ù–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç üòÖ")

# ---------------- –ó–ê–ü–£–°–ö ---------------- #
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ Telegram!")
    asyncio.run(dp.start_polling(bot))
