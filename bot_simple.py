# bot_simple.py ‚Äî –ò–ò (HF + —Ñ–æ–ª–±—ç–∫), –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –∞–Ω—Ç–∏-—Ñ–ª—É–¥ –ø—Ä–∏ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –º–∏–Ω–∏-–∏–≥—Ä–∞
import asyncio
import os
import re
import html
import requests
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramRetryAfter

import game_logic as game

# ====== —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞ (—Ö–∞—Ä–¥–∫–æ–¥, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª) ======
BOT_TOKEN = "8396678240:AAGtZq5LT41xgtB-XGu413TZ7LnWVfyaWVs"

# ====== Router (–µ–≥–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç app.py) ======
router = Router()

# ====== –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="ü§ñ –ò–ò —á–∞—Ç"), KeyboardButton(text="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞")]],
    resize_keyboard=True
)
BACK_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True
)

# ====== —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
_mode: dict[int, str] = {}  # user_id -> "ai" | "game"
def set_mode(uid: int, mode: str): _mode[uid] = mode
def get_mode(uid: int) -> str:     return _mode.get(uid, "ai")

# ====== –ò–ò: HuggingFace (–µ—Å–ª–∏ –µ—Å—Ç—å HF_TOKEN) + —Ñ–æ–ª–±—ç–∫ –±–µ–∑ –∫–ª—é—á–µ–π + –æ—á–∏—Å—Ç–∫–∞ ======
HF_TOKEN = os.getenv("HF_TOKEN")  # –¥–æ–±–∞–≤—å –Ω–∞ Render –≤ Environment –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
HF_URL = "https://api-inference.huggingface.co/models/google/gemma-2b-it"

def _clean_text(s: str) -> str:
    # —É–±–∏—Ä–∞–µ–º HTML/—Ä–∞–∑–º–µ—Ç–∫—É
    s = re.sub(r"<[^>]+>", " ", s)
    s = html.unescape(s)
    # –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å \uXXXX
    try:
        s = s.encode("utf-8").decode("unicode_escape")
    except Exception:
        pass
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–Ω–æ—Å—ã
    s = re.sub(r"[ \t\r\f\v]+", " ", s)
    s = re.sub(r"\n{3,}", "\n\n", s)
    return s.strip()

def _gen_sync(prompt: str, system: str | None = None) -> str:
    system = system or "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    text = f"{system}\n\n–í–æ–ø—Ä–æ—Å: {prompt}"

    # 1) HF —Å —Ç–æ–∫–µ–Ω–æ–º
    if HF_TOKEN:
        try:
            r = requests.post(
                HF_URL,
                headers={"Authorization": f"Bearer {HF_TOKEN}"},
                json={"inputs": text},
                timeout=60,
            )
            if r.status_code == 200:
                data = r.json()
                if isinstance(data, list) and data and "generated_text" in data[0]:
                    return _clean_text(data[0]["generated_text"] or "")
                return _clean_text(str(data))
        except Exception:
            pass  # –ø–æ–π–¥—ë–º –≤ —Ñ–æ–ª–±—ç–∫

    # 2) –§–æ–ª–±—ç–∫ –±–µ–∑ –∫–ª—é—á–µ–π (Pollinations)
    try:
        r = requests.get(
            "https://text.pollinations.ai/",
            params={"text": text, "seed": 0},
            headers={"Accept": "text/plain"},
            timeout=60,
        )
        if r.status_code == 200:
            return _clean_text(r.text or "")
        return f"–û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

async def generate_async(prompt: str, system: str | None = None) -> str:
    return await asyncio.to_thread(_gen_sync, prompt, system)

# ====== –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –∞–Ω—Ç–∏-—Ñ–ª—É–¥–æ–º ======
async def send_chunked(m: types.Message, text: str, max_len: int = 3500, max_chunks: int = 5):
    chunks = [text[i:i+max_len] for i in range(0, len(text), max_len)]
    if len(chunks) > max_chunks:
        rest = len(chunks) - max_chunks
        chunks = chunks[:max_chunks]
        chunks.append(f"‚Ä¶[–û—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–ª. –ï—â—ë —á–∞—Å—Ç–µ–π: {rest}. –°–∫–∞–∂–∏ ¬´–∫–æ—Ä–æ—á–µ¬ª –∏–ª–∏ —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å]")

    for chunk in chunks:
        while True:
            try:
                await m.answer(chunk)
                await asyncio.sleep(1.1)  # ~1 —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å–µ–∫
                break
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after + 1)
            except Exception:
                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º—Å—è
                break

# ====== –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–∏–≥—Ä—ã ======
game.init_from_config({"BOT_TOKEN": BOT_TOKEN})

# ====== —Ö—ç–Ω–¥–ª–µ—Ä—ã ======
@router.message(CommandStart())
async def start_cmd(m: types.Message):
    set_mode(m.from_user.id, "ai")
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ:\n\n"
        "‚Ä¢ ü§ñ –ò–ò —á–∞—Ç ‚Äî –æ–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é\n"
        "‚Ä¢ üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞ ‚Äî —ç–∫–æ–Ω–æ–º–∏–∫–∞/–∫–∞–∑–∏–Ω–æ/—Ñ–µ—Ä–º–∞\n",
        reply_markup=MAIN_KB
    )

@router.message(F.text == "ü§ñ –ò–ò —á–∞—Ç")
async def choose_ai(m: types.Message):
    set_mode(m.from_user.id, "ai")
    await m.answer("–†–µ–∂–∏–º: ü§ñ –ò–ò —á–∞—Ç. –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å/—Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=BACK_KB)

@router.message(F.text == "üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞")
async def choose_game(m: types.Message):
    set_mode(m.from_user.id, "game")
    await m.answer(
        "–†–µ–∂–∏–º: üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞. –ü–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø—Ä–æ—Ñ–∏–ª—å¬ª, ¬´–±–∞–ª–∞–Ω—Å¬ª, ¬´—Ä–∞–±–æ—Ç–∞¬ª, ¬´–∫–∞–∑–∏–Ω–æ 100¬ª).",
        reply_markup=BACK_KB
    )
    game.cmd_info(m.chat.id)

@router.message(F.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu(m: types.Message):
    set_mode(m.from_user.id, "ai")
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=MAIN_KB)

@router.message()
async def fallback(m: types.Message):
    uid = m.from_user.id
    mode = get_mode(uid)

    if mode == "game":
        handled = game.process_text_with_game(m)
        if not handled:
            await m.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É –º–∏–Ω–∏-–∏–≥—Ä—ã. –ü—Ä–∏–º–µ—Ä: ¬´–ø—Ä–æ—Ñ–∏–ª—å¬ª, ¬´–±–∞–ª–∞–Ω—Å¬ª, ¬´–∫–∞–∑–∏–Ω–æ 100¬ª.")
        return

    await m.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    text = await generate_async(m.text or "", system="–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º.")
    text = (text or "").strip()

    if not text:
        await m.answer("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
    else:
        await send_chunked(m, text, max_len=3500, max_chunks=5)

# ====== –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–∞ Render –Ω–µ –Ω—É–∂–µ–Ω) ======
if __name__ == "__main__":
    from aiogram import Bot, Dispatcher
    import logging
    logging.basicConfig(level=logging.INFO)
    async def main():
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()
        dp.include_router(router)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
        await dp.start_polling(bot)
    asyncio.run(main())
