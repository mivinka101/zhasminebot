# bot_simple.py ‚Äî –≤–µ—Ä—Å–∏—è —Å –∂—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ò–ò
import asyncio
import requests
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import game_logic as game

# ====== –¢–í–û–ô –¢–û–ö–ï–ù –ë–û–¢–ê (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª) ======
BOT_TOKEN = "8396678240:AAGtZq5LT41xgtB-XGu413TZ7LnWVfyaWVs"

# ====== –†–æ—É—Ç–µ—Ä (–µ–≥–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç app.py –Ω–∞ Render) ======
router = Router()

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="ü§ñ –ò–ò —á–∞—Ç"), KeyboardButton(text="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞")]],
    resize_keyboard=True
)
BACK_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True
)

# ====== –ü–∞–º—è—Ç—å —Ä–µ–∂–∏–º–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
_mode = {}  # user_id -> "ai" | "game"
def set_mode(uid: int, mode: str): _mode[uid] = mode
def get_mode(uid: int) -> str:     return _mode.get(uid, "ai")

# ====== –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ò–ò (–±–µ–∑ –∫–ª—é—á–µ–π/—É—Å—Ç–∞–Ω–æ–≤–æ–∫) ======
API_URL = "https://api-inference.huggingface.co/models/google/gemma-2b-it"

def _gen_sync(prompt: str, system: str | None = None) -> str:
    system = system or "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    text = f"{system}\n\n–í–æ–ø—Ä–æ—Å: {prompt}"
    try:
        r = requests.post(API_URL, json={"inputs": text}, timeout=60)
        if r.status_code == 200:
            data = r.json()
            if isinstance(data, list) and data and "generated_text" in data[0]:
                return (data[0]["generated_text"] or "").strip()
            return str(data)
        return f"–û—à–∏–±–∫–∞ {r.status_code}: {r.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

async def generate_async(prompt: str, system: str | None = None) -> str:
    return await asyncio.to_thread(_gen_sync, prompt, system)

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–Ω–∏-–∏–≥—Ä—ã ======
# –í —Ç–≤–æ—ë–º game_logic.py —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç chat_id/Message –∏ —Å–∞–º–∏ —à–ª—é—Ç –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ Telegram API.
# –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äî —Ç–∞–º —É–∂–µ –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.
game.init_from_config({"BOT_TOKEN": BOT_TOKEN})

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@router.message(CommandStart())
async def start_cmd(m: types.Message):
    set_mode(m.from_user.id, "ai")
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –Ω–∏–∂–µ:\n\n"
        "‚Ä¢ ü§ñ –ò–ò —á–∞—Ç ‚Äî –æ–±—â–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é\n"
        "‚Ä¢ üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞ ‚Äî —ç–∫–æ–Ω–æ–º–∏–∫–∞/–∫–∞–∑–∏–Ω–æ/—Ñ–µ—Ä–º–∞\n",
        reply_markup=MAIN_KB
    )

@router.message(F.text == "ü§ñ –ò–ò —á–∞—Ç")
async def choose_ai(m: types.Message):
    set_mode(m.from_user.id, "ai")
    await m.answer("–†–µ–∂–∏–º: ü§ñ –ò–ò —á–∞—Ç. –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å/—Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=BACK_KB)

@router.message(F.text == "üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞")
async def choose_game(m: types.Message):
    set_mode(m.from_user.id, "game")
    await m.answer(
        "–†–µ–∂–∏–º: üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞. –ü–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø—Ä–æ—Ñ–∏–ª—å¬ª, ¬´–±–∞–ª–∞–Ω—Å¬ª, ¬´—Ä–∞–±–æ—Ç–∞¬ª, ¬´–∫–∞–∑–∏–Ω–æ 100¬ª).",
        reply_markup=BACK_KB
    )
    game.cmd_info(m.chat.id)

@router.message(F.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu(m: types.Message):
    set_mode(m.from_user.id, "ai")
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=MAIN_KB)

@router.message()
async def fallback(m: types.Message):
    uid = m.from_user.id
    mode = get_mode(uid)

    if mode == "game":
        handled = game.process_text_with_game(m)  # True –µ—Å–ª–∏ –º–∏–Ω–∏-–∏–≥—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not handled:
            await m.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É –º–∏–Ω–∏-–∏–≥—Ä—ã. –ü—Ä–∏–º–µ—Ä: ¬´–ø—Ä–æ—Ñ–∏–ª—å¬ª, ¬´–±–∞–ª–∞–Ω—Å¬ª, ¬´–∫–∞–∑–∏–Ω–æ 100¬ª.")
        return

    # mode == "ai"
    await m.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    text = await generate_async(m.text or "", system="–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º.")
    await m.answer(text if text else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

# ====== –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling ======
# –ù–∞ Render —ç—Ç–æ –ù–ï –Ω—É–∂–Ω–æ (—Ç–∞–º webhook —á–µ—Ä–µ–∑ app.py).
if __name__ == "__main__":
    import logging
    from aiogram import Bot, Dispatcher
    logging.basicConfig(level=logging.INFO)
    async def main():
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher()
        dp.include_router(router)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
        await dp.start_polling(bot)
    asyncio.run(main())
